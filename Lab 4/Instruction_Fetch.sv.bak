`timescale 1ps / 1ps
module Instruction_Fetch (clk, reset);
	input logic clk, reset, stall_PC, BrTaken;
	input logic [63:0] BrTakenAddr
	output logic [63:0] PC_Addr
	output logic [31:0] instruction 
	
	logic [63:0] PC_in, PC_norm; 
	
	mux2_1_64bit branch_mux (.i0(PC_norm), .i1(BrTakenAddr), .sel(BrTaken), .out(PC_in)); //Branch Address Mux
	
	fullAdder64 pc_adder0(.A(PC_Addr), .B(64'd4), .out(PC_norm), .carryout(), .overflow()); //PC Adder (PC = PC + 4)
	
	// Made the pc with write enable for stalling, stall_PC is flipped so we don't write when stall_PC = 1
	pc program_counter(.reset(reset), .clk(clk), .wrt_en(~stall_PC), .datain(pc_in), .dataout(PC_Addr)); //PC 
	
	instructmem instruction_memory(.address(PC_Addr), .instruction(instruction), .clk(clk)); // Insturction Memory
	

endmodule 

module Instruction_Fetch_tb();
//	logic clk, reset;
//	
//	cpu dut (.*);
//	
//	parameter CLOCK_PERIOD = 10000;
//	initial begin
//		clk <= 0;
//		forever #(CLOCK_PERIOD/2) clk <= ~clk;
//	end
//	
//	int i;
//	initial begin
//		reset <= 1; 
//			repeat(4) @(posedge clk);
//		reset <= 0; 
//		
//		for (i = 0; i < 400; i++) begin
//			@(posedge clk);
//		end
//		$stop;
	end	
endmodule