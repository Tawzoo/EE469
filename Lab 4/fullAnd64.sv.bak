`timescale 1ps / 1ps
module fullAnd64 (A, B, out, carryout, overflow, negative);

	input logic  [63:0] A, B;
	output logic [63:0] out; 
	output logic carryout, overflow, negative;
	
	parameter Delay = 50;

	genvar i;
	
	generate
		for(i = 0; i< 64; i++) begin : eachDFF
			and #Delay and_Gatei(out[i], A[i], B[i]);

		end
	endgenerate 
	
	// flags 
//	assign carryout = carry_arr[63];
//	xor #Delay xor_Gate(overflow, carry_arr[63], carry_arr[62]);
//	assign negative = out[63];
	

endmodule 


module fullAnd64_tb ();
	logic [63:0] A, B, out;	
	logic carryout, overflow, negative;
	
	fullAnd64 dut (.A, .B, .out, .carryout, .overflow, .negative);
	
	integer i;
	
	initial begin 
		A=0; B=0; #1000;
		A=1; B=0; #1000;
		A=64'hFFFFFFFFFFFFFFFF; B=0; #1000;
		A=64'hFFFFFFFFFFFFFFFF; B=64'hFFFFFFFFFFFFFFFF; #1000;
		A=1; B=0; #1000;

	end
endmodule 
