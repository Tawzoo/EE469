`timescale 1ps / 1ps
module EX (WB_en_in, WB_en_out, MemRead, MemWrite, BrLink_in, BrLink_out, MemtoReg_in, MemtoReg_out,
				PC_Addr_in, PC_Addr_out, ALU_Result_in, ALU_Result_out, ALU_FF, DM_Read_Data, Instruction4_0_in, Instruction4_0_out,
				EX_MEM_Rd, MEM_ALU_Result, clk, reset);
					
	input logic WB_en_in, MemRead, MemWrite, BrLink_in, MemtoReg_in, reset, clk;
	input logic [63:0] PC_Addr_in, ALU_Result_in, ALU_FF;
	input logic [4:0] Instruction4_0_in
	
	output logic WB_en_out, BrLink_out, MemtoReg_out;
	output logic [63:0] PC_Addr_out, ALU_Result_out, Write_Data, DM_Read_Data, MEM_ALU_Result;
	output logic [4:0] Instruction4_0_out, EX_MEM_Rd;
	
	//Data Memory
	datamem datamemory(.address(ALU_Result_in), .write_enable(MemWrite), .read_enable(MemRead), .write_data(ALU_FF), 
							 .clk(clk), .xfer_size(4'd8), .read_data(DM_Read_Data));
							 
	assign WB_en_out = WB_en_in;
	assign BrLink_out = BrLink_in;
	assign MemtoReg_out = MemtoReg_in;
	assign PC_Addr_out = PC_Addr_in;
	assign ALU_Result_out = ALU_Result_in;
	assign MEM_ALU_Result = ALU_Result_in;
	assign Instruction4_0_out = Instruction4_0_in;
	assign EX_MEM_Rd = Instruction4_0_in;
	
	
